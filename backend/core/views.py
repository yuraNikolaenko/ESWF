from rest_framework import generics, viewsets
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.decorators import api_view
from django.apps import apps
from .models import Driver, Vehicle
from .serializers import DriverSerializer, VehicleSerializer
import re
import os
import openai
from datetime import datetime, date
from django.conf import settings
from .semantic_parser import parse_query

openai.api_key = os.getenv("OPENAI_API_KEY") or getattr(settings, "OPENAI_API_KEY", None)

SYSTEM_PROMPT = '''
–¢–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.
–†–æ–∑—É–º—ñ—î—à —É–∫—Ä–∞—ó–Ω—Å—å–∫—É, —Ä–æ—Å—ñ–π—Å—å–∫—É, —Å—É—Ä–∂–∏–∫.
–í–º—ñ—î—à –≤–∏–ø—Ä–∞–≤–ª—è—Ç–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏.
–Ø–∫—â–æ –∑–∞–ø–∏—Ç —Å—Ñ–æ—Ä–º—É–ª—å–æ–≤–∞–Ω–æ –Ω–µ—Ç–æ—á–Ω–æ ‚Äî –∑–¥–æ–≥–∞–¥—É—î—à—Å—è –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
'''

def normalize_text(text):
    text = text.lower()
    replacements = {
        "—Å–∫—ñ–ª–±–∫—É": "—Å–∫—ñ–ª—å–∫–∏",
        "—Å–∫—ñ–ª—å–∫–∏—å": "—Å–∫—ñ–ª—å–∫–∏",
        "—Å—Ç–µ—Ä–∞—à–µ": "—Å—Ç–∞—Ä—à–µ",
        "—Å—Ç–∞—Ä–≥–µ": "—Å—Ç–∞—Ä—à–µ",
        "–∞–≤—Ç–æ–º–æ–±—ñ–ª–≤": "–∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤",
        "–º–∞—à–∏–Ω": "–∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤",
        "–º–∞—à–∏–Ω–∏": "–∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ",
        "–Ω–æ–º–µ—Ä": "license_plate",
        "–¥–µ—Ä–∂–Ω–æ–º–µ—Ä": "license_plate",
        "–ø–æ—à—Ç–∞": "email",
        "–º–µ–π–ª": "email",
        "—Ç–µ–ª–µ—Ñ–æ–Ω": "phone_number",
        "—Ç–µ–ª.": "phone_number",
        "—ñ–ø–Ω": "ipn",
        "–∞–¥—Ä–µ—Å–∞": "address",
        "–≤—ñ–Ω": "vin",
        "–≤—ñ–Ω–∫–æ–¥": "vin",
        "–ª—ñ—Ü–µ–Ω–∑—ñ—è": "license_number",
        "–≤–æ–¥—ñ–π—Å—å–∫–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è": "license_number",
        "—Ä—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è": "birth_date",
        "—ñ–º'—è": "name",
        "–ø—Ä—ñ–∑–≤–∏—â–µ": "name",
        "–º–∞—à–∏–Ω–∞": "vehicle",
        "–∞–≤—Ç–æ": "vehicle",
        "–∞–≤—Ç—ñ–≤–∫–∞": "vehicle",
    }
    for k, v in replacements.items():
        text = text.replace(k, v)
    return text

# --- API –¥–ª—è Driver ---
class DriverListCreateAPIView(generics.ListCreateAPIView):
    queryset = Driver.objects.all()
    serializer_class = DriverSerializer

class DriverRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Driver.objects.all()
    serializer_class = DriverSerializer

# --- API –¥–ª—è Vehicle ---
class VehicleListCreateAPIView(generics.ListCreateAPIView):
    queryset = Vehicle.objects.all()
    serializer_class = VehicleSerializer

class VehicleRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Vehicle.objects.all()
    serializer_class = VehicleSerializer

class DriverViewSet(viewsets.ModelViewSet):
    queryset = Driver.objects.all()
    serializer_class = DriverSerializer

# --- Meta API ---
class ModelMetaView(APIView):
    def get(self, request, model_name):
        try:
            model = apps.get_model("core", model_name.capitalize())
        except LookupError:
            return Response({"error": "Model not found"}, status=404)

        meta = []
        for field in model._meta.fields:
            if field.name in ['id', 'uuid', 'isfolder', 'ismark']:
                continue

            field_type = "char"
            if field.get_internal_type() == "DateField":
                field_type = "date"
            elif field.get_internal_type() in ["BooleanField", "NullBooleanField"]:
                field_type = "boolean"
            elif field.choices:
                field_type = "choice"

            field_info = {
                "name": field.name,
                "type": field_type,
                "required": not field.blank,
            }

            if field_type == "choice":
                field_info["choices"] = list(field.choices)

            meta.append(field_info)

        return Response(meta)

# --- –û—Å–Ω–æ–≤–Ω–∞ GPT —Ç–æ—á–∫–∞ ---
@api_view(['POST'])
def chat_with_gpt(request):
    raw_message = request.data.get("message", "").strip()
    user_message = normalize_text(raw_message)

    print("GPT: –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", raw_message)
    print("GPT: –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–µ:", user_message)

    parsed = parse_query(
        user_message,
        model_fields={
            "Vehicle": ["name", "brand", "model", "year", "vin", "license_plate", "driver_id"],
            "Driver": ["name", "birth_date", "gender", "license_number", "phone_number", "email", "ipn", "address"]
        }
    )

    intent = parsed.get("intent")
    params = parsed.get("params", {})
    current_year = datetime.now().year

    if intent == "vehicle_age_query":
        years = int(params.get("years", 5))
        count = Vehicle.objects.filter(year__lt=current_year - years).count()
        return Response({"reply": f"–£ –±–∞–∑—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ {count} –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤, —Å—Ç–∞—Ä—à–∏—Ö –∑–∞ {years} —Ä–æ–∫—ñ–≤."})

    if intent == "driver_age_query":
        years = int(params.get("years", 30))
        cutoff = date.today().replace(year=date.today().year - years)
        count = Vehicle.objects.filter(driver__isnull=False, driver__birth_date__lt=cutoff).count()
        return Response({"reply": f"–£ –±–∞–∑—ñ {count} –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤, –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–∏—Ö –∑–∞ –≤–æ–¥—ñ—è–º–∏ –≤—ñ–∫–æ–º –ø–æ–Ω–∞–¥ {years} —Ä–æ–∫—ñ–≤."})

    if intent == "count_all":
        model_name = params.get("model")
        try:
            Model = apps.get_model("core", model_name)
            count = Model.objects.count()
            return Response({"reply": f"–£ –±–∞–∑—ñ {count} –∑–∞–ø–∏—Å—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ {model_name}."})
        except Exception as e:
            print("‚ùå count_all error:", e)

    if intent == "get_field_by_name":
        model_name = params.get("model")
        name = params.get("name")
        target_field = params.get("target_field")
        try:
            Model = apps.get_model("core", model_name)
            instance = Model.objects.filter(name__icontains=name).first()
            if instance:
                value = getattr(instance, target_field, None)
                return Response({"reply": f"{target_field.replace('_', ' ').capitalize()}: {value}"})
            else:
                return Response({"reply": f"{model_name} –∑ —ñ–º‚Äô—è–º {name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."})
        except Exception as e:
            print("‚ùå get_field_by_name error:", e)

    # Fallback ‚Äî —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": raw_message}
    ]
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.4,
        )
        answer = response.choices[0].message.content.strip()
        return Response({"reply": answer})
    except Exception as e:
        import traceback
        print("GPT: –í–ò–ü–ê–õ–ê –ü–û–ú–ò–õ–ö–ê üî•")
        traceback.print_exc()
        return Response({"error": str(e)}, status=500)
