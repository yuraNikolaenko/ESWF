from django.core.management.base import BaseCommand
from django.core.management import call_command
from core.models import Country, LocationPoint
from pathlib import Path
import json

class Command(BaseCommand):
    help = '–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ: –∫—Ä–∞—ó–Ω–∏, –Ω–∞—Å–µ–ª–µ–Ω—ñ –ø—É–Ω–∫—Ç–∏, –≤–æ–¥—ñ—ó, –º–∞—à–∏–Ω–∏'

    def handle(self, *args, **kwargs):
        base_dir = Path("core/fixtures/initial")

        # --- –Ü–º–ø–æ—Ä—Ç –∫—Ä–∞—ó–Ω ---
        self.stdout.write("üì• –Ü–º–ø–æ—Ä—Ç –∫—Ä–∞—ó–Ω...")
        with open(base_dir / "countries.json", encoding="utf-8-sig") as f:
            countries = json.load(f)
        for item in countries:
            Country.objects.update_or_create(
                name=item["name"],
                defaults={
                    "name_local": item.get("name_local"),
                    "alpha2_code": item.get("alpha2_code"),
                    "alpha3_code": item.get("alpha3_code"),
                    "numeric_code": item.get("numeric_code"),
                }
            )
        self.stdout.write(self.style.SUCCESS(f"‚úÖ –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {len(countries)} –∫—Ä–∞—ó–Ω."))

        # 2. LocationPoint
        print("üìç –Ü–º–ø–æ—Ä—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏—Ö –ø—É–Ω–∫—Ç—ñ–≤...")
        with open(base_dir / "locationpoints.json", encoding="utf-8") as f:
            ukraine = Country.objects.filter(numeric_code="804").first()
            data = json.load(f)
            for item in data:
                LocationPoint.objects.update_or_create(
                    code=item["code"],
                    defaults={
                        "name": item["name"],
                        "region": item.get("region"),
                        "latitude": item.get("latitude"),
                        "longitude": item.get("longitude"),
                        "type": item.get("type"),
                        "country": ukraine,
                    }
                )
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(data)} –ø—É–Ω–∫—Ç—ñ–≤.")

        # --- –Ü–º–ø–æ—Ä—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏—Ö –ø—É–Ω–∫—Ç—ñ–≤ ---
        self.stdout.write("üìç –ú–æ–¥—ñ—Ñ—ñ–∫–∞—Ü—ñ—è  –Ω–∞—Å–µ–ª–µ–Ω–∏—Ö –ø—É–Ω–∫—Ç—ñ–≤...")
        call_command("assign_parents")

        # --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–æ–¥—ñ—ó–≤ ---
        self.stdout.write("üë§ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–æ–¥—ñ—ó–≤...")
        call_command("generate_drivers")

        # --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –º–∞—à–∏–Ω ---
        self.stdout.write("üöö –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –º–∞—à–∏–Ω...")
        call_command("generate_vehicles")

        self.stdout.write(self.style.SUCCESS("üéâ –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ."))
