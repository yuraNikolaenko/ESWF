import openai
import os
import json
from django.conf import settings

openai.api_key = os.getenv("OPENAI_API_KEY") or getattr(settings, "OPENAI_API_KEY", None)

def parse_query(user_message: str, model_fields: dict = None):
    SYSTEM_PROMPT = """
–¢–∏ –∞–Ω–∞–ª—ñ–∑—É—î—à –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î—à JSON —É —Ñ–æ—Ä–º–∞—Ç—ñ:

{
  "intent": "count_by_field",
  "params": {
    "model": "Driver",
    "field": "gender",
    "value": "F"
  }
}

üß† –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–π —Ç–∞–∫—ñ –ø–∞—Ç–µ—Ä–Ω–∏:
- "–∂—ñ–Ω–∫–∞", "–∂—ñ–Ω–æ—á–∞ —Å—Ç–∞—Ç—å", "–∂—ñ–Ω–æ—á–æ—ó —Å—Ç–∞—Ç—ñ" ‚Üí gender = "F"
- "—á–æ–ª–æ–≤—ñ–∫", "—á–æ–ª–æ–≤—ñ—á–∞ —Å—Ç–∞—Ç—å" ‚Üí gender = "M"
- "—Å—Ç–∞—Ä—à–µ X —Ä–æ–∫—ñ–≤", "–≤—ñ–∫–æ–º –ø–æ–Ω–∞–¥ X —Ä–æ–∫—ñ–≤" ‚Üí vehicle_age_query –∞–±–æ driver_age_query
- "—á–µ—Ä–≤–æ–Ω–∏–π", "–±—ñ–ª–∏–π", "—Å–∏–Ω—ñ–π" ‚Üí color

üîë –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è, —è–∫—ñ –º–æ–∂–µ –∑–≥–∞–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:
- "–Ω–æ–º–µ—Ä", "–¥–µ—Ä–∂–Ω–æ–º–µ—Ä" ‚Üí license_plate
- "–ø–æ—à—Ç–∞", "–º–µ–π–ª" ‚Üí email
- "—Ç–µ–ª–µ—Ñ–æ–Ω", "—Ç–µ–ª." ‚Üí phone_number
- "—ñ–ø–Ω" ‚Üí ipn
- "–∞–¥—Ä–µ—Å–∞", "–ø–æ—à—Ç–æ–≤–∞ –∞–¥—Ä–µ—Å–∞" ‚Üí address
- "–≤—ñ–Ω", "–≤—ñ–Ω–∫–æ–¥" ‚Üí vin
- "–≤–æ–¥—ñ–π—Å—å–∫–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è", "–ª—ñ—Ü–µ–Ω–∑—ñ—è" ‚Üí license_number
- "—Ä—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è" ‚Üí birth_date
- "–º–∞—à–∏–Ω–∞", "–∞–≤—Ç–æ", "–∞–≤—Ç—ñ–≤–∫–∞" ‚Üí Vehicle
- "–≤–æ–¥—ñ–π" ‚Üí Driver

üÜï –ù–æ–≤–∏–π intent:
- "—Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥—ñ—è –Ü–º‚Äô—è –ü—Ä—ñ–∑–≤–∏—â–µ", "email –≤–æ–¥—ñ—è –Ü–≤–∞–Ω" ‚Üí intent: get_field_by_name, params: {model: Driver, name: ..., target_field: phone_number –∞–±–æ email}
- "–°–∫—ñ–ª—å–∫–∏ –º–∞—à–∏–Ω", "–°–∫—ñ–ª—å–∫–∏ –≤–æ–¥—ñ—ó–≤", "how many cars", "—Å–∫—ñ–ª—å–∫–∏ –∑–∞–ø–∏—Å—ñ–≤ —É –±–∞–∑—ñ" ‚Üí intent: count_all, params: {model: ...}

üîÅ –î–æ–¥–∞—Ç–∫–æ–≤–æ –ø—ñ–¥—Ç—Ä–∏–º—É–π –∞–Ω–≥–ª—ñ–π—Å—å–∫—É:
- "how many vehicles", "how many cars" ‚Üí Vehicle
- "how many drivers", "driver count" ‚Üí Driver

–¢–∏ –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è ERP-—Å–∏—Å—Ç–µ–º–∏. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Å—É—Ç—å –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–Ω–∞–≤—ñ—Ç—å –∑ –ø–æ–º–∏–ª–∫–∞–º–∏), –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–º—ñ—Ä (intent) —ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (params).
–ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ JSON —É —Ñ–æ—Ä–º–∞—Ç—ñ:

{
  "intent": "vehicle_age_query",
  "params": {
    "years": 5
  }
}

–ú–æ–∂–ª–∏–≤—ñ intent-–∏:
- vehicle_age_query
- driver_age_query
- color_filter
- count_by_field
- count_all
- get_field_by_name
- unknown

–Ø–∫—â–æ —Ç—Ä–µ–±–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–∞–¥–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—ñ–≤ –º–æ–¥–µ–ª—ñ.
"""

    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": f"–ó–∞–ø–∏—Ç: {user_message}\n–ü–æ–ª—è –º–æ–¥–µ–ª–µ–π: {model_fields or '{}'}"}
    ]

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.3,
        )
        reply = response.choices[0].message.content.strip()
        print("Semantic Parser GPT output:", reply)
        return json.loads(reply)
    except Exception as e:
        print("Semantic parsing error:", e)
        return {"intent": "unknown", "params": {}}
